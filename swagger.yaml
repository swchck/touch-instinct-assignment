swagger: "2.0"
info:
  version: "1.0.0"
  title: "Cards API"
  description: "This is an example Cards API"
host: "cards.com"
basePath: "/v1"
schemes:
  - "http"
  - "https"
consumes:
  - "application/json"
produces:
  - "application/json"
paths:
  /login:
    put:
      summary: "Login"
      description: "Authenticate a user and return an access token"
      parameters:
        - name: "body"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/AuthRequest"
      responses:
        200:
          description: "Successful response"
          schema:
            $ref: "#/definitions/AuthSuccess"
        400:
          description: "Invalid username or password"
          schema:
            $ref: "#/definitions/AuthError"
  /logout:
    post:
      summary: "Logout"
      description: "Invalidate an access token"
      parameters:
        - name: "Authorization"
          in: "header"
          required: true
          type: "string"
          default: "Bearer {access_token}"
      responses:
        200:
          description: "Successful response"
  
  /forgot-password:
    post:
      summary: "Forgot Password"
      description: "Send a request to recover password"
      parameters:
        - name: "body"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/ForgotPasswordRequest"
      responses:
        200:
          description: "Successful response"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Password reset email sent"
        400:
          description: "Invalid data provided"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Invalid data provided"
  /forgot-login:
    post:
      summary: "Recover Access"
      description: "Recovers access to an account"
      parameters:
        - name: "body"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/ForgotLoginRequest"
      responses:
        200:
          description: "Successful response"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Login request sent"
        400:
          description: "Invalid data provided"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Invalid data provided"

  /welcome:
    get:
      summary: "Welcome"
      description: "Welcome message"
      parameters:
        - name: "Authorization"
          in: "header"
          required: true
          type: "string"
          default: "Bearer {access_token}"
      responses:
        200:
          description: "Successful response"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                description: "Welcome message, could be a random quote or generated message especially for the user"
                example: "Welcome to the Cards API"
  
  /get-cards:
    get:
      summary: "Get Cards"
      description: "Get all cards"
      parameters:
        - name: "Authorization"
          in: "header"
          required: true
          type: "string"
          default: "Bearer {access_token}"
      responses:
        200:
          description: "Successful response"
          schema:
            $ref: "#/definitions/GetCardsResponse"
        400:
          description: "Invalid access token"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Invalid access token"
  /block-card:
    post:
      summary: "Block Card"
      description: "Block a card"
      parameters:
        - name: "Authorization"
          in: "header"
          required: true
          type: "string"
          default: "Bearer {access_token}"
        - name: "body"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/BlockCardRequest"
      responses:
        200:
          description: "Successful response"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Card block request sent"
        400:
          description: "Invalid access token"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Invalid access token"
  
  /operations:
    get:
      summary: "Get all Operations"
      description: "Get all operations for a card"
      parameters:
        - name: "Authorization"
          in: "header"
          required: true
          type: "string"
          default: "Bearer {access_token}"
        - name: "card_id"
          in: "query"
          required: true
          type: "integer"
          default: 1
        - name: "limit"
          in: "query"
          required: false
          type: "integer"
          default: 10
      responses:
        200:
          description: "Successful response"
          schema:
            type: "object"
            properties:
              operations:
                type: "array"
                items:
                  $ref: "#/definitions/Operation"
              total:
                type: "integer"
                example: 100
        400:
          description: "Invalid access token"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Invalid access token"
  /operation-details:
    get:
      summary: "Get Operation Details"
      description: "Get details for an operation"
      parameters:
        - name: "Authorization"
          in: "header"
          required: true
          type: "string"
          default: "Bearer {access_token}"
        - name: "operation_id"
          in: "query"
          required: true
          type: "integer"
          default: 1
      responses:
        200:
          description: "Successful response"
          schema:
            $ref: "#/definitions/OperationDetails"
        400:
          description: "Invalid access token"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Invalid access token"
  
  /operation-disput:
    post:
      summary: "Disput Operation"
      description: "Disput an operation"
      parameters:
        - name: "Authorization"
          in: "header"
          required: true
          type: "string"
          default: "Bearer {access_token}"
        - name: "body"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/DisputOperationRequest"
      responses:
        200:
          description: "Successful response"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Operation disput request sent"
        400:
          description: "Invalid access token"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Invalid access token"     
  
  /rate-app:
    post:
      summary: "Rate App"
      description: "Rate the app"
      parameters:
        - name: "Authorization"
          in: "header"
          required: true
          type: "string"
          default: "Bearer {access_token}"
        - name: "body"
          in: "body"
          required: true
          schema:
            type: "object"
            properties:
              rating:
                type: "integer"
                example: 5
              commentary:
                type: "string"
                example: "This is a great app"
      responses:
        200:
          description: "Successful response"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Thank you for your feedback"
        400:
          description: "Invalid access token"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Invalid access token"
  
  /complain:
    get:
      summary: "Complain"
      description: "Get all complains"
      parameters:
        - name: "Authorization"
          in: "header"
          required: true
          type: "string"
          default: "Bearer {access_token}"
      responses:
        200:
          description: "Successful response"
          schema:
            $ref: "#/definitions/GetComplaintsResponse"
        400:
          description: "Invalid access token"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Invalid access token"
        
definitions:
  AuthRequest:
    type: "object"
    properties:
      username:
        type: "string"
        example: "user123"
      password:
        type: "string"
        example: "password123"
  AuthSuccess:
    type: "object"
    properties:
      access_token:
        type: "string"
        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
  AuthError:
    type: "object"
    properties:
      code:
        type: "integer"
        example: 400
      message:
        type: "string"
        example: "Invalid username or password"
  ForgotPasswordRequest:
    type: "object"
    properties:
      login:
        type: "string"
        example: "user123"
      comment:
        type: "string"
        example: "I forgot my password"
  ForgotLoginRequest:
    type: "object"
    properties:
      fullname:
        type: "string"
        example: "John Doe"
      birthdate:
        type: "string"
        example: "1990-01-01"
      comment:
        type: "string"
        example: "I forgot my login"
  GetCardsResponse:
    type: "array"
    items:
      $ref: "#/definitions/Card"
  Card:
    type: "object"
    properties:
      id:
        type: "integer"
        example: 1
      name:
        type: "string"
        example: "Card 1"
      description:
        type: "string"
        example: "Card 1 description"
      blocked:
        type: "string"
        enum:
          - "yes"
          - "no"
          - "pending"
      number:
        type: "string"
        example: "1234 5678 9012 3456"
      cardholder:
        type: "string"
        example: "John Doe"
      common-limit:
        type: "integer"
        example: 1000
      withdrawal-limit:
        type: "integer"
        example: 1000
      purchase-limit:
        type: "integer"
        example: 1000
  BlockCardRequest:
    type: "object"
    properties:
      card_id:
        type: "integer"
        example: 1
      reason:
        type: "string"
        enum:
          - "lost"
          - "stolen"
          - "atm"
          - "other"
  GetComplaintsResponse:
    type: "array"
    items:
      $ref: "#/definitions/Complaint"
  Complaint:
    type: "object"
    properties:
      id: 
        type: "integer"
        example: 1
      subject:
        type: "string"
        example: "Complaint 1"
      description:
        type: "string"
        example: "Complaint 1 description"
      status:
        type: "string"
        enum:
          - "pending"
          - "resolved"
          - "rejected"
      created_at:
        type: "string"
        example: "2020-01-01 00:00:00"
      updated_at:
        type: "string"
        example: "2020-01-01 00:00:00"
  Operation:
    type: "object"
    properties:
      id:
        type: "integer"
        example: 1
      type:
        type: "string"
        enum:
          - "withdrawal"
          - "purchase"
          - "transfer"
          - "payment"
      issuer:
        type: "string"
        example: "ATM"
      amount:
        type: "integer"
        example: 100
      created_at:
        type: "string"
        example: "2020-01-01 00:00:00"
      updated_at:
        type: "string"
        example: "2020-01-01 00:00:00"
  OperationDetails:
    type: "object"
    properties:
      id:
        type: "integer"
        example: 1
      name:
        type: "string"
        example: "Operation 1"
      amount:
        type: "integer"
        example: 100
      issuer-card:
        type: "string"
        example: "1234 5678 9012 3456"
      issued-at:
        type: "string"
        example: "2020-01-01 00:00:00"
  DisputOperationRequest:
    type: "object"
    properties:
      operation_id:
        type: "integer"
        example: 1
      reason:
        type: "string"
        enum:
          - "fraud"
          - "other"

        
      

      

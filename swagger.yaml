openapi: "3.0.0"
info:
  title: "Cards API"
  description: "This is an example Cards API"
  version: "1.0.0"
  contact:
    name: "Cards API"
    url: "https://cards.com"
    email: "support@cards.api"
  license:
    name: "MIT"
    url: "https://opensource.org/licenses/MIT"
externalDocs:
  description: "Find out more about Swagger"
  url: "file://README.md"
servers:
  - url: https://api.cards.com
    description: "Production server"
  - url: http://localhost:8080
    description: "Development server"
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    AuthRequest:
      type: "object"
      properties:
        username:
          type: "string"
          example: "user123"
        password:
          type: "string"
          example: "password123"
    AuthSuccess:
      type: "object"
      properties:
        access_token:
          type: "string"
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
    AuthError:
      type: "object"
      properties:
        code:
          type: "integer"
          example: 400
        message:
          type: "string"
          example: "Invalid username or password"
    ForgotPasswordRequest:
      type: "object"
      properties:
        login:
          type: "string"
          example: "user123"
        comment:
          type: "string"
          example: "I forgot my password"
    ForgotLoginRequest:
      type: "object"
      properties:
        fullname:
          type: "string"
          example: "John Doe"
        birthdate:
          type: "string"
          example: "1990-01-01"
        comment:
          type: "string"
          example: "I forgot my login"
    GetCardsResponse:
      type: "array"
      items:
        $ref: "#/components/schemas/Card"
    Card:
      type: "object"
      properties:
        id:
          type: "integer"
          example: 1
        name:
          type: "string"
          example: "Card 1"
        description:
          type: "string"
          example: "Card 1 description"
        blocked:
          type: "string"
          enum:
            - "yes"
            - "no"
            - "pending"
        number:
          type: "string"
          example: "1234 5678 9012 3456"
        cardholder:
          type: "string"
          example: "John Doe"
        common-limit:
          type: "integer"
          example: 1000
        withdrawal-limit:
          type: "integer"
          example: 1000
        purchase-limit:
          type: "integer"
          example: 1000
        default:
          type: "boolean"
          example: true
    BlockCardRequest:
      type: "object"
      properties:
        reason:
          type: "string"
          enum:
            - "lost"
            - "stolen"
            - "atm"
            - "other"
    GetComplaintsResponse:
      type: "array"
      items:
        $ref: "#/components/schemas/Complaint"
    Complaint:
      type: "object"
      properties:
        id:
          type: "integer"
          example: 1
        subject:
          type: "string"
          example: "Complaint 1"
        description:
          type: "string"
          example: "Complaint 1 description"
        status:
          type: "string"
          enum:
            - "pending"
            - "resolved"
            - "rejected"
        created_at:
          type: "string"
          example: "2020-01-01 00:00:00"
        updated_at:
          type: "string"
          example: "2020-01-01 00:00:00"
    Transaction:
      type: "object"
      properties:
        id:
          type: "integer"
          example: 1
        type:
          type: "string"
          enum:
            - "withdrawal"
            - "purchase"
            - "transfer"
            - "payment"
        issuer:
          type: "string"
          example: "ATM"
        amount:
          type: "integer"
          example: 100
        created_at:
          type: "string"
          example: "2020-01-01 00:00:00"
        updated_at:
          type: "string"
          example: "2020-01-01 00:00:00"
    TransactionDetails:
      type: "object"
      properties:
        id:
          type: "integer"
          example: 1
        name:
          type: "string"
          example: "transaction 1"
        amount:
          type: "integer"
          example: 100
        issuer-card:
          type: "string"
          example: "1234 5678 9012 3456"
        issued-at:
          type: "string"
          example: "2020-01-01 00:00:00"
    DisputTransactionRequest:
      type: "object"
      properties:
        reason:
          type: "string"
          enum:
            - "fraud"
            - "other"
paths:
  /login:
    put:
      summary: "Login"
      tags:
        - "Authorization"
      operationId: "login"
      description: "Authenticate a user and return an access token"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthRequest"
      responses:
        200:
          description: "Successful response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthSuccess"
        400:
          description: "Invalid username or password"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthError"
  /logout:
    post:
      summary: "Logout"
      tags:
        - "Authorization"
      operationId: "logout"
      description: "Invalidate an access token"
      security:
        - bearerAuth: []
      responses:
        200:
          description: "Successful response"

  /forgot/password:
    post:
      summary: "Forgot Password"
      tags:
        - "Access Recovery"
      operationId: "forgotPassword"
      description: "Send a request to recover password"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ForgotPasswordRequest"
      responses:
        200:
          description: "Successful response"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
                    example: "Password reset email sent"
        400:
          description: "Invalid data provided"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
                    example: "Invalid data provided"
  /forgot/login:
    post:
      summary: "Recover Access"
      tags:
        - "Access Recovery"
      operationId: "forgotLogin"
      description: "Recovers access to an account"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ForgotLoginRequest"
      responses:
        200:
          description: "Successful response"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
                    example: "Login recovery email sent"
        400:
          description: "Invalid data provided"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
                    example: "Invalid data provided"

  /welcome:
    get:
      summary: "Welcome"
      tags:
        - "Welcome Message"
      operationId: "welcome"
      description: "Welcome message"
      security:
        - bearerAuth: []
      responses:
        200:
          description: "Successful response"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
                    description: "Welcome message, could be a random quote or generated message especially for the user"
                    example: "Welcome to the Cards API"

  /card:
    get:
      summary: "Get Cards"
      tags:
        - "Cards"
      operationId: "getCards"
      description: "Get all cards"
      security:
        - bearerAuth: []
      responses:
        200:
          description: "Successful response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetCardsResponse"
        400:
          description: "Invalid access token"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
                    example: "Invalid access token"
  /card/{card_id}:
    get:
      summary: "Get Card Details"
      tags:
        - "Cards"
      operationId: "getCardDetails"
      description: "Get details for a card"
      security:
        - bearerAuth: []
      parameters:
        - name: "card_id"
          in: "query"
          required: true
          schema:
            type: "integer"
            default: 1
      responses:
        200:
          description: "Successful response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Card"
        400:
          description: "Invalid access token"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
                    example: "Invalid access token"
    post:
      summary: "Block Card"
      tags:
        - "Cards"
      operationId: "blockCard"
      description: "Block a card"
      security:
        - bearerAuth: []
      parameters:
        - name: "card_id"
          in: "query"
          required: true
          schema:
            type: "integer"
            default: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BlockCardRequest"
      responses:
        200:
          description: "Successful response"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
                    example: "Card block request sent"
        400:
          description: "Invalid access token"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
                    example: "Invalid access token"
    patch:
      summary: Set Card as Default
      tags:
        - "Cards"
      description: Set a card as default
      operationId: setCardAsDefault
      security:
        - bearerAuth: []
      parameters:
        - name: "card_id"
          in: "query"
          required: true
          schema:
            type: "integer"
            default: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                default:
                  type: "boolean"
                  example: true
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Card"
        400:
          description: "Invalid access token"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
                    example: "Invalid access token"

  /card/{card_id}/transaction:
    get:
      summary: "Get all transactions"
      tags:
        - "Transactions"
      operationId: "getTransactions"
      description: "Get all transactions for a card"
      security:
        - bearerAuth: []
      parameters:
        - name: "card_id"
          in: "path"
          required: true
          schema:
            type: "integer"
            default: 1
        - name: "limit"
          in: "query"
          required: false
          schema:
            type: "integer"
            default: 10
      responses:
        200:
          description: "Successful response"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  transactions:
                    type: "array"
                    items:
                      $ref: "#/components/schemas/Transaction"
                  total:
                    type: "integer"
                    example: 100
        400:
          description: "Invalid access token"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
                    example: "Invalid access token"
  /card/{card_id}/transaction/{transaction_id}:
    get:
      summary: "Get transaction Details"
      tags:
        - "Transactions"
      operationId: "getTransactionDetails"
      description: "Get details for an transaction"
      security:
        - bearerAuth: []
      parameters:
        - name: "transaction_id"
          in: "path"
          required: true
          schema:
            type: "integer"
            default: 1
        - name: "card_id"
          in: "path"
          required: true
          schema:
            type: "integer"
            default: 1
      responses:
        200:
          description: "Successful response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionDetails"
        400:
          description: "Invalid access token"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
                    example: "Invalid access token"
    post:
      summary: "Create transaction Dispute"
      tags:
        - "Transactions"
      operationId: "disputTransaction"
      description: "Disput an transaction"
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: "transaction_id"
          required: true
          schema:
            type: "integer"
            default: 1
        - in: path
          name: "card_id"
          required: true
          schema:
            type: "integer"
            default: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DisputTransactionRequest"
      responses:
        200:
          description: "Successful response"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
                    example: "transaction disput request sent"
        400:
          description: "Invalid access token"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
                    example: "Invalid access token"

  /complain:
    get:
      summary: "Get Complains"
      tags:
        - "Complains"
      operationId: "getComplains"
      description: "Get all complains"
      security:
        - bearerAuth: []
      responses:
        200:
          description: "Successful response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetComplaintsResponse"
        400:
          description: "Invalid access token"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
                    example: "Invalid access token"
    post:
      summary: "Create Complain"
      tags:
        - "Complains"
      operationId: "createComplain"
      description: "Create a complain"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                subject:
                  type: "string"
                  example: "Complain 1"
                description:
                  type: "string"
                  example: "Complain 1 description"
      responses:
        200:
          description: "Successful response"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
                    example: "Complain created"
        400:
          description: "Invalid access token"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
                    example: "Invalid access token"

  /rate-app:
    get:
      summary: "Is App Rated"
      tags:
        - "Others"
      operationId: "isAppRated"
      description: "Check if the app is rated"
      security:
        - bearerAuth: []
      responses:
        200:
          description: "Successful response"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  rated:
                    type: "boolean"
                    example: true
        400:
          description: "Invalid access token"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
                    example: "Invalid access token"
    post:
      summary: "Rate App"
      tags:
        - "Others"
      operationId: "rateApp"
      description: "Rate the app"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                rating:
                  type: "integer"
                  example: 5
                commentary:
                  type: "string"
                  example: "This is a great app"
      responses:
        200:
          description: "Successful response"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
                    example: "Thank you for your feedback"
        400:
          description: "Invalid access token"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
                    example: "Invalid access token"
